# This workflow can be invoked only from caller workflow.
# More information about Reusing workflows - https://docs.github.com/en/actions/using-workflows/reusing-workflows

# Workflow prepares and publishes comment in PR which is related with trigger commit. "Restore PR comment cache"
# step fetches cached data with prepared and posted comment sections from previous workflow run related with the
# same PR. This prepared data (comment sections) will be parsed and extended by report data from current workflow.
# Extended data will be used for update of existing comment. With such approach one comment can collect report
# data from different workflows which are executed independently one from each other but in context of the same PR.
# Currently, such report sections are available:
# - App Storybook build
# - App Storybook deployment to GitHub Pages
# - App unit Tests
# - App E2E Tests

name: 'Reusable :: Report in PR'

on:
  workflow_call:
    inputs:
      # If we need publish available run artifacts list, separate workflow must be invoked as artifacts
      # from current workflow run are not visible for API before run is completed. Dispatch event will be created
      # automatically from github-script action via GutHub API call in step "Run github-script for preparation and
      # publication comment content".
      # Related issue - https://github.com/actions/upload-artifact/issues/50
      publish-artifacts-list:
        required: true
        type: boolean

      # App Storybook build
      app-storybook-build-pub-report:
        required: true
        type: boolean
      app-storybook-build-status:
        required: false
        type: boolean

      # App Storybook deployment to GitHub Pages
      app-storybook-deploy-pub-report:
        required: true
        type: boolean
      app-storybook-deploy-status:
        required: false
        type: boolean

      # App unit Tests
      app-unit-test-pub-report:
        required: true
        type: boolean
      app-unit-test-status:
        required: false
        type: boolean
      app-unit-test-codecov-percentage:
        required: false
        type: string
      app-unit-test-codecov-diff:
        required: false
        type: string

      # App E2E Tests
      app-e2e-test-pub-report:
        required: true
        type: boolean
      app-e2e-test-status:
        required: false
        type: boolean

    secrets:
      gh_token:
        required: true
      # Branch name which is configured as a root branch for GitHub Pages
      gh_pages_full_branch:
        required: true
      # Custom domain for configured GitHub Pages, where App and Storybook builds are deployed. Must be passed
      # | as a secret because API doesn't receive this value.
      gh_pages_custom_domain:
        required: true

jobs:
  publish-report-pr-comment:
    name: 'Publish comment'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 'Get Timestamp'
        id: get-timestamp
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYYMMDDHHmmssSSS'

      # | Restore cached PR comment data from previous/parallel runs.
      - name: 'Restore PR comment cache'
        id: cache-reporter-content
        uses: actions/cache@v2
        env:
          TIMESTAMP: ${{ steps.get-timestamp.outputs.time }}
        with:
          path: ./reporter-artifacts
          key: reporter-artifacts-branch-${{ github.ref_name }}-commit-${{ github.sha }}-${{ steps.timestamp.outputs.time }}
          restore-keys: |
            reporter-artifacts-branch-${{ github.ref_name }}-commit-${{ github.sha }}-

      # | Check existence of restored comment data.
      # | We cannot use output from "actions/cache" - "cache-hit" because it has value "true" only in exact match of
      # | cache key (https://github.com/actions/cache#outputs). In current case we need search cached data by
      # | "restore-keys" value. It's necessary though previous workflow run must save cache with unique key
      # | ("steps.timestamp.outputs.time" is unique part for each workflow run even if it's triggered by the same commit).
      # | As result current workflow will fetch the latest cache for triggered commit from previous/parallel runs.
      # | More details about matching cache keys here -
      # | https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      - name: 'Check folder existence'
        id: check-cache-dir-existence
        shell: bash
        run: |
          sudo chmod +x ./scripts/ci/gh-actions-is-dir-exists.sh
          echo "##[set-output name=exists;]$(./scripts/ci/gh-actions-is-dir-exists.sh "./reporter-artifacts")"

      - name: 'Parse PR comment data from cache'
        id: parse-pr-comment-data
        if: steps.check-cache-dir-existence.outputs.exists == 'true'
        run: |
          ISSUE_COMMENT_DATA=$(cat ./reporter-artifacts/pr-comment-data.txt)
          echo $ISSUE_COMMENT_DATA
          echo "::set-output name=data::$ISSUE_COMMENT_DATA"

      # | Create folder for reporter artifacts if folder is not existing. It can be necessary if comment data is not
      # | available in cache from previous workflow.
      - name: 'Create reporter artifacts dir'
        run: mkdir -p reporter-artifacts

      - name: 'Run github-script for preparation and publication comment content'
        id: pr-comment-data
        uses: actions/github-script@v6
        env:
          # | Title for matching already existing comments in PR for update particular comment.
          REPORT_MSG_TITLE: 'Basilisk UI reporter'

          # | Workflow file which will be dispatched from github-script via API for fetching and publication
          # | artifacts list from current workflow run if "PUBLISH_ARTIFACTS_LIST === true"
          PUBLISH_ARTIFACTS_WORKFLOW_DISPATCH_FILE: _dispatch_publish-pr-comment-with-artifacts.yml

          # | Cached comment data from previous run which has been triggerred for the same PR as for current run.
          COMMENT_CACHED_CONTENT: ${{steps.parse-pr-comment-data.outputs.data || false}}

          # | Artifacts
          PUBLISH_ARTIFACTS_LIST: ${{inputs.publish-artifacts-list}}

          # | App Storybook build
          IS_APP_STORYBOOK_BUILD_REPORT: ${{ inputs.app-storybook-build-pub-report }}
          APP_STORYBOOK_BUILD_STATUS: ${{ inputs.app-storybook-build-status }}

          # | App Storybook deployment to GitHub Pages
          IS_APP_STORYBOOK_DEPLOYMENT_REPORT: ${{ inputs.app-storybook-deploy-pub-report }}
          APP_STORYBOOK_DEPLOYMENT_STATUS: ${{ inputs.app-storybook-deploy-status }}

          # | App E2E Tests
          IS_APP_E2E_TEST_REPORT: ${{ inputs.app-e2e-test-pub-report }}
          APP_E2E_TEST_STATUS: ${{ inputs.app-e2e-test-status }}

          # | Storybook E2E Tests
          IS_STORYBOOK_E2E_TEST_REPORT: false # | Functionality must be implemented

          # | Storybook unit Tests
          IS_STORYBOOK_UNIT_TEST_REPORT: false # | Functionality must be implemented

          # | App unit Tests
          IS_APP_UNIT_TEST_REPORT: ${{ inputs.app-unit-test-pub-report }}
          APP_UNIT_TEST_PERCENTAGE: ${{ inputs.app-unit-test-codecov-percentage }}
          APP_UNIT_TEST_DIFF: ${{ inputs.app-unit-test-codecov-diff }}
          APP_UNIT_TEST_STATUS: ${{ inputs.app-unit-test-status }}

          # | Env variables
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_PAGES_CUSTOM_DOMAIN: ${{ secrets.gh_pages_custom_domain }}

        with:
          # | "github-token" parameter is required for work with GitHub API
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const script = require('./scripts/ci/github-script-src/publish-pr-comment.js')
            return await script({github, context, core})

      # | Save PR comment data into file which will be cached for further workflows
      - name: 'Save PR comment data'
        run: echo ${{ steps.pr-comment-data.outputs.result }} > ./reporter-artifacts/pr-comment-data.txt
